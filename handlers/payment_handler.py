import hashlib
from urllib.parse import urlencode

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice, PreCheckoutQuery
from aiogram.filters import Command

from config_data.config import Config
from database.queries import update_balance, get_balance

PAYMASTER_URL = "https://paymaster.ru/Payment/Init"  # URL PayMaster –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
config = Config()

# FSM –¥–ª—è –æ–ø–ª–∞—Ç—ã
class PaymentState(StatesGroup):
    waiting_for_amount = State()


# –†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
payment_router = Router()


def generate_payment_link(user_id: int, amount: float, description: str, success_url: str, secret_key: str,
                          merchant_id: str):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è PayMaster.
    """
    data = {
        "LMI_MERCHANT_ID": merchant_id,
        "LMI_PAYMENT_AMOUNT": f"{amount:.2f}",  # –°—É–º–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100.00)
        "LMI_PAYMENT_DESC": description,  # –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        "LMI_PAYMENT_NO": f"{user_id}_{int(amount * 100)}",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        "LMI_LANGUAGE": "en",  # –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ("ru" –∏–ª–∏ "en")
        "LMI_SUCCESS_URL": success_url,  # URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    }

    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å (signature)
    signature_data = f"{data['LMI_MERCHANT_ID']};{data['LMI_PAYMENT_AMOUNT']};{data['LMI_PAYMENT_DESC']};{secret_key}"
    data["LMI_HASH"] = hashlib.sha256(signature_data.encode('utf-8')).hexdigest()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
    payment_url = f"{PAYMASTER_URL}?{urlencode(data)}"
    return payment_url


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /payment
@payment_router.message(Command("payment"))
async def ask_payment(message: Message, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–£–∫–∞–∑–∞—Ç—å —Å—É–º–º—É"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–£–∫–∞–∑–∞—Ç—å —Å—É–º–º—É", callback_data="set_amount")],
        ]
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await message.answer("–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£–∫–∞–∑–∞—Ç—å —Å—É–º–º—É"
@payment_router.callback_query(F.data == "set_amount")
async def prompt_for_amount(callback_query, state: FSMContext):
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100.50):")
    await state.set_state(PaymentState.waiting_for_amount)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
@payment_router.message(PaymentState.waiting_for_amount)
async def process_amount(message: Message, state: FSMContext, bot):

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã
        amount = float(message.text)
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")

        PRICE = LabeledPrice(label="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ VoiceTran", amount=amount*100)
        await bot.send_invoice(message.chat.id,
                               title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ VoiceTran",
                               description="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
                               provider_token=config.PAYMASTER,
                               currency="rub",
                               photo_url="https://www.aroged.com/wp-content/uploads/2022/06/Telegram-has-a-premium-subscription.jpg",
                               photo_width=416,
                               photo_height=234,
                               photo_size=416,
                               is_flexible=False,
                               prices=[PRICE],
                               start_parameter="one-month-subscription",
                               payload="test-invoice-payload")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()


@payment_router.message(F.successful_payment)
async def successful_payment(message: Message, bot):
    print("SUCCESSFUL PAYMENT:")

    update_balance(message.from_user.id, message.successful_payment.total_amount//100)
    await message.answer(f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!!!")

@payment_router.pre_checkout_query()
async def pre_checkout_query(pre_checkout_q: PreCheckoutQuery, bot):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

@payment_router.message(Command("balance"))
async def balance(message: Message):
    await message.answer("üí≥" + str(get_balance(message.from_user.id)))